package dev.mathops.persistence.config;

import dev.mathops.commons.builder.SimpleBuilder;
import dev.mathops.commons.file.FileLoader;
import dev.mathops.commons.log.Log;
import dev.mathops.commons.parser.ParsingException;
import dev.mathops.commons.parser.json.JSONObject;
import dev.mathops.commons.parser.json.JSONParser;
import dev.mathops.persistence.EFieldRole;
import dev.mathops.persistence.EFieldType;
import dev.mathops.persistence.Field;
import dev.mathops.persistence.Table;
import dev.mathops.persistence.constraint.AbstractFieldConstraint;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * A container for all configuration state, with utility methods to load and store the state.
 */
public final class DataLayerConfig {

    /** A zero-length array of fields, used to convert a list to an array. */
    private static final Field[] EMPTY_FIELD_ARRAY = new Field[0];

    /** A zero-length array of field constraints, used to convert a list to an array. */
    private static final AbstractFieldConstraint<?>[] EMPTY_CONSTRAINT_ARRAY = new AbstractFieldConstraint<?>[0];

    /** The configuration directory. */
    private final File configDir;

    /** The list of loaded schemas (each with their contexts and tables). */
    private final List<SchemaConfig> schemas;

    /** The list of loaded implementations. */
    private final List<ImplementationConfig> implementations;

    /** The list of loaded roles. */
    private final List<RoleConfig> roles;

    /** The list of loaded logins. */
    private final List<LoginConfig> logins;

    /** The list of loaded data configurations. */
    private final List<DataConfiguration> configurations;

    /** The list of warning messages generated by a "load" operation. */
    private final List<String> warnings;

    /** The list of error messages generated by a "load" operation. */
    private final List<String> errors;

    /**
     * Constructs a new {@code DataLayerConfig}.
     *
     * @param theConfigDir the configuration directory
     */
    DataLayerConfig(final File theConfigDir) {

        this.configDir = theConfigDir;

        this.schemas = new ArrayList<>(10);
        this.implementations = new ArrayList<>(10);
        this.roles = new ArrayList<>(10);
        this.logins = new ArrayList<>(10);
        this.configurations = new ArrayList<>(10);
        this.warnings = new ArrayList<>(10);
        this.errors = new ArrayList<>(10);
    }

    /**
     * Attempts to load state.  This operation may accumulate errors or warnings about state.
     *
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    boolean isLoadOk() {

        this.schemas.clear();
        this.implementations.clear();
        this.roles.clear();
        this.logins.clear();
        this.configurations.clear();
        this.warnings.clear();
        this.errors.clear();

        final boolean schemasOk = isSchemasFileOk();
        final boolean implementationsOk = isImplementationsFileOk();
        final boolean rolesOk = isRolesFileOk();
        final boolean loginsOk = isLoginsFileOk();
        final boolean configurationsOk = isConfigurationsFileOk();

        return schemasOk && implementationsOk && rolesOk && loginsOk && configurationsOk;
    }

    /**
     * Attempts to load schemas from "schemas.json".
     *
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isSchemasFileOk() {

        boolean ok = true;

        final File file = new File(this.configDir, "schemas.json");

        final String contents = FileLoader.loadFileAsString(file, true);
        if (contents == null) {
            final String dirPath = this.configDir.getAbsolutePath();
            final String msg = SimpleBuilder.concat("'schemas.json' file not found in ", dirPath);
            this.errors.add(msg);
        } else {
            try {
                final Object parsed = JSONParser.parseJSON(contents);

                if (parsed instanceof final Object[] array) {
                    for (final Object item : array) {
                        if (item instanceof final JSONObject obj) {
                            ok = ok && isSchemaObjectOk(obj);
                        } else {
                            final String dirPath = this.configDir.getAbsolutePath();
                            final String clsName = item.getClass().getName();
                            final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                                    "), expecting OBJECT with schema definition in 'schemas.json' in ", dirPath);
                            this.warnings.add(msg);
                        }
                    }
                } else if (parsed instanceof final JSONObject obj) {
                    ok = isSchemaObjectOk(obj);
                } else {
                    final String dirPath = this.configDir.getAbsolutePath();
                    final String clsName = parsed.getClass().getName();
                    final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                            "), expecting OBJECT with schema definition in 'schemas.json' in ", dirPath);
                    this.warnings.add(msg);
                }
            } catch (final ParsingException ex) {
                Log.warning(ex);
                final String dirPath = this.configDir.getAbsolutePath();
                final String msg = SimpleBuilder.concat("Unable to parse 'schemas.json' in ", dirPath);
                this.errors.add(msg);
            }
        }

        return ok;
    }

    /**
     * Attempts to extract schema configuration from a JSON object.
     *
     * @param obj the JSON object
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isSchemaObjectOk(final JSONObject obj) {

        boolean ok = true;

        SchemaConfig config = null;

        final String schemaName = obj.getStringProperty("schema-name");
        if (schemaName == null) {
            final String dirPath = this.configDir.getAbsolutePath();
            final String msg = SimpleBuilder.concat("Missing schema name in 'schemas.json' in ", dirPath);
            this.errors.add(msg);
            ok = false;
        } else {
            config = new SchemaConfig(schemaName);
        }

        final Object contexts = obj.getProperty("contexts");
        if (contexts == null) {
            final String dirPath = this.configDir.getAbsolutePath();
            final String msg = SimpleBuilder.concat("Missing contexts array in 'schemas.json' [", schemaName, "] in ",
                    dirPath);
            this.errors.add(msg);
            ok = false;
        } else if (contexts instanceof final Object[] contextsArray) {
            for (final Object inner : contextsArray) {
                if (inner instanceof final JSONObject contextObj) {
                    ok &= isSchemaContextOk(contextObj, config);
                } else {
                    final String dirPath = this.configDir.getAbsolutePath();
                    final String clsName = inner.getClass().getName();
                    final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                            "), expecting OBJECT with context definition in 'schemas.json' [", schemaName, "] in ",
                            dirPath);
                    this.warnings.add(msg);
                }
            }
        } else {
            final String dirPath = this.configDir.getAbsolutePath();
            final String clsName = contexts.getClass().getName();
            final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                    "), expecting array of contexts in 'schemas.json' [", schemaName, "] in ", dirPath);
            this.warnings.add(msg);
        }

        final Object tables = obj.getProperty("tables");
        if (tables == null) {
            final String dirPath = this.configDir.getAbsolutePath();
            final String msg = SimpleBuilder.concat("Missing tables array in 'schemas.json' [", schemaName, "] in ",
                    dirPath);
            this.errors.add(msg);
            ok = false;
        } else if (tables instanceof final Object[] tablesArray) {
            for (final Object inner : tablesArray) {
                if (inner instanceof final JSONObject tableObj) {
                    ok &= isSchemaTableOk(tableObj, config);
                } else {
                    final String dirPath = this.configDir.getAbsolutePath();
                    final String clsName = inner.getClass().getName();
                    final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                            "), expecting OBJECT with table definition in 'schemas.json' [", schemaName, "] in ",
                            dirPath);
                    this.warnings.add(msg);
                }
            }
        } else {
            final String dirPath = this.configDir.getAbsolutePath();
            final String clsName = tables.getClass().getName();
            final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                    "), expecting array of contexts in 'schemas.json' [", schemaName, "] in ", dirPath);
            this.warnings.add(msg);
        }

        if (config != null) {
            final int numContexts = config.getNumContexts();
            if (numContexts == 0) {
                final String dirPath = this.configDir.getAbsolutePath();
                final String msg = SimpleBuilder.concat("Schema defined with no contexts in 'schemas.json' [",
                        schemaName, "] in ", dirPath);
                this.errors.add(msg);
                ok = false;
            }

            final int numtables = config.getNumTables();
            if (numtables == 0) {
                final String dirPath = this.configDir.getAbsolutePath();
                final String msg = SimpleBuilder.concat("Schema defined with no tables in 'schemas.json' [",
                        schemaName, "] in ", dirPath);
                this.errors.add(msg);
                ok = false;
            }
        }

        return ok;
    }

    /**
     * Attempts to extract context configuration from a JSON object within a schema configuration.
     *
     * @param obj the JSON object
     * @param schema the schema to which to add the context configuration if valid
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isSchemaContextOk(final JSONObject obj, final SchemaConfig schema) {

        boolean ok = true;

        final String contextName = obj.getStringProperty("context-name");
        if (contextName == null) {
            final String dirPath = this.configDir.getAbsolutePath();
            final String schemaName = schema.getName();
            final String msg = SimpleBuilder.concat("Missing context name in context in 'schemas.json' [",
                    schemaName, "] in ", dirPath);
            this.errors.add(msg);
            ok = false;
        } else {
            final SchemaContextConfig context = new SchemaContextConfig(contextName);
            schema.addContext(context);
        }

        return ok;
    }

    /**
     * Attempts to extract table configuration from a JSON object within a schema configuration.
     *
     * @param obj the JSON object
     * @param schema the schema to which to add the table configuration if valid
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isSchemaTableOk(final JSONObject obj, final SchemaConfig schema) {

        boolean ok = true;

        final String tableName = obj.getStringProperty("table-name");
        if (tableName == null) {
            final String dirPath = this.configDir.getAbsolutePath();
            final String msg = SimpleBuilder.concat("Missing table name in table in 'schemas.json' in ", dirPath);
            this.errors.add(msg);
            ok = false;
        } else {
            final Object fields = obj.getProperty("fields");
            if (fields == null) {
                final String dirPath = this.configDir.getAbsolutePath();
                final String schemaName = schema.getName();
                final String msg = SimpleBuilder.concat("Missing fields array in '", tableName,
                        "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                this.errors.add(msg);
                ok = false;
            } else if (fields instanceof final Object[] tablesArray) {

                final List<Field> fieldsList = new ArrayList<>(10);

                for (final Object inner : tablesArray) {
                    if (inner instanceof final JSONObject tableObj) {
                        ok &= isTableFieldOk(tableObj, schema, tableName, fieldsList);
                    } else {
                        final String dirPath = this.configDir.getAbsolutePath();
                        final String clsName = inner.getClass().getName();
                        final String schemaName = schema.getName();
                        final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                                "), expecting OBJECT with table definition in 'schemas.json' [", schemaName, "] in ",
                                dirPath);
                        this.warnings.add(msg);
                    }
                }

                if (ok) {
                    final String schemaName = schema.getName();
                    final Field[] fieldArray = fieldsList.toArray(EMPTY_FIELD_ARRAY);
                    final Table table = new Table(schemaName, tableName, fieldArray);
                    schema.addTable(table);
                }
            } else {
                final String dirPath = this.configDir.getAbsolutePath();
                final String clsName = fields.getClass().getName();
                final String schemaName = schema.getName();
                final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                        "), expecting array of contexts in 'schemas.json' [", schemaName, "] in ", dirPath);
                this.warnings.add(msg);
            }
        }

        return ok;
    }

    /**
     * Attempts to extract field configuration from a JSON object within a table configuration.
     *
     * @param obj the JSON object
     * @param schema the schema to which to add the table configuration if valid
     * @param tableName the table name, for diagnostic logging
     * @param fieldsList the list to which to add the parsed field, if valid
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isTableFieldOk(final JSONObject obj, final SchemaConfig schema, final String tableName,
                                   final Collection<Field> fieldsList) {

        boolean ok = true;

        final String fieldName = obj.getStringProperty("field-name");
        if (fieldName == null) {
            final String dirPath = this.configDir.getAbsolutePath();
            final String schemaName = schema.getName();
            final String msg = SimpleBuilder.concat("Missing field name in '", tableName, "' table in 'schemas.json' [",
                    schemaName, "] in ", dirPath);
            this.errors.add(msg);
            ok = false;
        } else {
            final String type = obj.getStringProperty("type");
            if (type == null) {
                final String dirPath = this.configDir.getAbsolutePath();
                final String schemaName = schema.getName();
                final String msg = SimpleBuilder.concat("Missing field type in '", tableName,
                        "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                this.errors.add(msg);
                ok = false;
            } else {
                final EFieldType fieldType = EFieldType.forName(type);
                if (fieldType == null) {
                    final String dirPath = this.configDir.getAbsolutePath();
                    final String schemaName = schema.getName();
                    final String msg = SimpleBuilder.concat("Invalid field type in '", tableName,
                            "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                    this.errors.add(msg);
                    ok = false;
                } else {
                    final String role = obj.getStringProperty("role");
                    if (role == null) {
                        final String dirPath = this.configDir.getAbsolutePath();
                        final String schemaName = schema.getName();
                        final String msg = SimpleBuilder.concat("Missing field role in '", tableName,
                                "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                        this.errors.add(msg);
                        ok = false;
                    } else {
                        final EFieldRole fieldRole = EFieldRole.forName(role);
                        if (fieldRole == null) {
                            final String dirPath = this.configDir.getAbsolutePath();
                            final String schemaName = schema.getName();
                            final String msg = SimpleBuilder.concat("Invalid field role in '", tableName,
                                    "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                            this.errors.add(msg);
                            ok = false;
                        } else {
                            final String description = obj.getStringProperty("role");
                            if (description == null) {
                                final String dirPath = this.configDir.getAbsolutePath();
                                final String schemaName = schema.getName();
                                final String msg = SimpleBuilder.concat("Missing field description in '", tableName,
                                        "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                                this.warnings.add(msg);
                            }

                            final List<AbstractFieldConstraint<?>> constraintsList = new ArrayList<>(10);

                            final Object constraints = obj.getProperty("constraints");
                            if (constraints == null) {
                                final String dirPath = this.configDir.getAbsolutePath();
                                final String schemaName = schema.getName();
                                final String msg = SimpleBuilder.concat("Missing constraints array in '", tableName,
                                        "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                                this.errors.add(msg);
                                ok = false;
                            } else if (constraints instanceof final Object[] tablesArray) {
                                for (final Object inner : tablesArray) {
                                    if (inner instanceof final JSONObject tableObj) {
                                        ok &= isFieldConstraintOk(tableObj, constraintsList);
                                    } else {
                                        final String dirPath = this.configDir.getAbsolutePath();
                                        final String clsName = inner.getClass().getName();
                                        final String schemaName = schema.getName();
                                        final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                                                "), expecting OBJECT with table definition in '", tableName,
                                                "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                                        this.warnings.add(msg);
                                    }
                                }
                            } else {
                                final String dirPath = this.configDir.getAbsolutePath();
                                final String clsName = constraints.getClass().getName();
                                final String schemaName = schema.getName();
                                final String msg = SimpleBuilder.concat("Unexpected object type (", clsName,
                                        "), expecting array of constraints in '", tableName,
                                        "' table in 'schemas.json' [", schemaName, "] in ", dirPath);
                                this.warnings.add(msg);
                            }

                            if (ok) {
                                final AbstractFieldConstraint<?>[] constraintsArray =
                                        constraintsList.toArray(EMPTY_CONSTRAINT_ARRAY);

                                final Field field = new Field(fieldName, fieldType, fieldRole, description,
                                        constraintsArray);
                                fieldsList.add(field);
                            }
                        }
                    }
                }
            }
        }

        return ok;
    }

    /**
     * Attempts to extract field configuration from a JSON object within a table configuration.
     *
     * <pre>
     * {"type": "byte-range", "min": 1, "max": 10}
     * {"type": "double-range", "allow": "...EFloatingPointAllow.name...", "min": 1.0, "max": 10.0}
     * {"type": "float-range", "allow": "...EFloatingPointAllow.name...", "min": 1.0, "max": 10.0}
     * {"type": "integer-range", "min": 1, "max": 10}
     * {"type": "long-range", "min": 1, "max": 10}
     * {"type": "string-enum", "values": ["A", "B", "C"]}
     * {"type": "string-length", "min": 1, "max": 10}
     * </pre>
     *
     * @param obj the JSON object
     * @param constraintsList the list to which to add the parsed constraint, if valid
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isFieldConstraintOk(final JSONObject obj,
                                   final Collection<AbstractFieldConstraint<?>> constraintsList) {

        boolean ok = true;

        return ok;
    }

    /**
     * Attempts to load implementations from "schemas.json".
     *
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isImplementationsFileOk() {

        return false;
    }

    /**
     * Attempts to load roles from "schemas.json".
     *
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isRolesFileOk() {

        return false;
    }

    /**
     * Attempts to load logins from "schemas.json".
     *
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isLoginsFileOk() {

        return false;
    }

    /**
     * Attempts to load data configurations from "schemas.json".
     *
     * @return {@code true} if a usable state was loaded (possibly with warnings), {@code false} if not
     */
    private boolean isConfigurationsFileOk() {

        return false;
    }

    /**
     * Attempts to store the configuration to its directory.
     *
     * @return {@code true} if state was stored successfully, {@code false} if not
     */
    boolean store() {

        return false;
    }
}